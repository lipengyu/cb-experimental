#!/bin/bash
[[ "$TRACE" ]] && set -x

: ${RUN_GLANCE_IN_DOCKER:=true}
: ${MAX_TRIES:=10}
: ${SLEEP:=10}

_glance() {

  if [[ "$RUN_GLANCE_IN_DOCKER" == "true" ]]; then
      docker run \
        -u ${ORIG_USER:-$USER} \
        -v $PWD:/work \
        -w /work \
        -e OS_IMAGE_NAME=$OS_IMAGE_NAME \
        -e OS_AUTH_URL=$OS_AUTH_URL \
        -e OS_PASSWORD=$OS_PASSWORD \
        -e OS_TENANT_NAME=$OS_TENANT_NAME \
        -e OS_USERNAME=$OS_USERNAME \
        sequenceiq/glance-cli:1.1.0 \
      "$@"
  else
    glance "$@"
  fi
}

wait_for_image() {
  declare imageid=${1:? image id or name required}
  echo "---> testing glance cli, listing images:"
  _glance image-list

  echo "---> WAIT for image readyness: $imageid ..."
  for i in $(seq 1 $MAX_TRIES); do
    if _glance image-show $imageid &>/dev/null; then
        echo "---> READY: $imageid "
        return
    fi
    echo "---> sleep $SLEEP ..."
    sleep $SLEEP
  done
  echo "---> [ERROR] image: $imageid couldnt be find after $MAX_TRIES retry "
}

main() {
    wait_for_image {{ .Artifact.Id }}
    echo "===> glance cli will download {{ .Config.PackerUserVars.os_image_name }}.img"
    _glance image-download --file {{ .Config.PackerUserVars.os_image_name }}.img {{ .Artifact.Id }}

    ls -lrth *.img || true
}

[[ "$0" == "$BASH_SOURCE" ]] && main "$@"
